def versionToDeploy = pluginVersion

task fillTemplate {
    // fill the updatePlugins template
    String fileContents = new File('updatePlugins_template.xml').text

    String fileUrl = "${repository_url}/com/comuto/android-template-plugin/android-template-plugin-${version}.jar"

    def binding = [
        "plugin_url":fileUrl,
        "pluginVersion":pluginVersion,
        "pluginSinceBuild":pluginSinceBuild,
        "pluginUntilBuild":pluginUntilBuild
    ]

    def engine = new groovy.text.SimpleTemplateEngine()
    def filledTemplate = engine.createTemplate(fileContents).make(binding)

    def result = filledTemplate
    def destFile = new File('updatePlugins_tmp.xml')
    destFile.createNewFile()
    destFile.text = result
}

tasks.publish.dependsOn(fillTemplate)

task letsgo(dependsOn: ['publish']) {
    doFirst {
        println 'Let\'s go template plugin !'


    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from java.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        def xmlFile = layout.projectDirectory.file('updatePlugins_tmp.xml')
        def xmlArtifact = artifacts.add('archives', xmlFile) {
            type 'xml'
        }

        maven(MavenPublication) {
            artifact xmlArtifact
            groupId = GROUP
            artifactId = ARTIFACT_ID
            version = "index"
        }

        mavenJava(MavenPublication) {
            groupId = GROUP
            artifactId = ARTIFACT_ID
            version = versionToDeploy

            from components.java

            pom {
                name = PROJECT_NAME
                description = PROJECT_DESCRIPTION
                packaging = PACKAGING
                groupId = GROUP
                artifactId = ARTIFACT_ID
                developers {
                    developer {
                        id = DEVELOPER_ID
                        name = DEVELOPER_NAME
                        email = DEVELOPER_EMAIL
                    }
                }
            }
        }
    }

    repositories {
       /*
        mavenLocal()
        */
        maven {
             name "githubBlablacar"
             url "{repository_ur}"
             credentials(PasswordCredentials)
         }
    }
}

tasks.withType(AbstractPublishToMaven) {

    doLast {
        def name = "${publication.groupId}:${publication.artifactId}:${publication.version}"
        if (it instanceof PublishToMavenRepository) {
            println "******************** Published $name to ${repository.url} *****************"
        } else if (it instanceof PublishToMavenLocal) {
            println "******************** Published $name to local repository  *****************"
        }
    }
}