def xmlFile = layout.projectDirectory.file('updatePlugins.xml')
def xmlArtifact = artifacts.add('archives', xmlFile) {
    type 'xml'
}

task letsgo(dependsOn: ['publish']) {
    doFirst {
        println 'Let\'s go template plugin !'

        def text = 'Dear "$firstname $lastname",\nSo nice to meet you in <% print city %>.\nSee you in ${month},\n${signed}'

        def binding = [
            "plugin_url":TODO(),
            "pluginVersion":pluginVersion,
            "pluginSinceBuild":pluginSinceBuild,
            "pluginUntilBuild":pluginUntilBuild
        ]

        def engine = new groovy.text.SimpleTemplateEngine()
        def template = engine.createTemplate(text).make(binding)

        def result = 'Dear "Sam Pullara",\nSo nice to meet you in San Francisco.\nSee you in December,\nGroovy-Dev'
        println(result)
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from java.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact xmlArtifact
            groupId = GROUP
            artifactId = ARTIFACT_ID
            version = "index"
        }
        mavenJava(MavenPublication) {
            groupId = GROUP
            artifactId = ARTIFACT_ID
            version = isReleaseBuild() ? pluginVersion : pluginVersion + generateSnapshotSuffix()

            from components.java

            pom {
                name = PROJECT_NAME
                description = PROJECT_DESCRIPTION
                packaging = PACKAGING
                groupId = GROUP
                artifactId = ARTIFACT_ID
                developers {
                    developer {
                        id = DEVELOPER_ID
                        name = DEVELOPER_NAME
                        email = DEVELOPER_EMAIL
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
        /*
        flatDir {
            dirs "${project.rootDir}/libs"
        }

         */
        /*
         maven {
             name "githubBlablacar"
             url "https://maven.pkg.github.com/blablacar/java-packages"
             credentials(PasswordCredentials)
         }
         */
    }
}

tasks.withType(AbstractPublishToMaven) {

    doLast {
        def name = "${publication.groupId}:${publication.artifactId}:${publication.version}"
        if (it instanceof PublishToMavenRepository) {
            println "******************** Published $name to ${repository.url} *****************"
        } else if (it instanceof PublishToMavenLocal) {
            println "******************** Published $name to local repository  *****************"
        }
    }
}

static def generateSnapshotSuffix() {
    return "-" + new Date().format("yyyyMMddHHmmssSSS", TimeZone.getTimeZone("UTC")) + "-SNAPSHOT"
}

def isReleaseBuild() {
    return project.hasProperty('env') && project.property('env') == "RELEASE"
}